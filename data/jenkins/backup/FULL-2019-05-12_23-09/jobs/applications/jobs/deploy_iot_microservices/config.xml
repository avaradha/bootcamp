<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.32">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.8"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.8">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>Deploy the IoT Microservices</description>
  <displayName>Deploy IoT Microservices</displayName>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <org.biouno.unochoice.ChoiceParameter plugin="uno-choice@2.1">
          <name>ENV</name>
          <description></description>
          <randomName>choice-parameter-1097795050730</randomName>
          <visibleItemCount>1</visibleItemCount>
          <script class="org.biouno.unochoice.model.GroovyScript">
            <secureScript plugin="script-security@1.58">
              <script>import jenkins.model.*

def envVars = Jenkins.instance.getGlobalNodeProperties()[0].getEnvVars()

return envVars[&apos;VALID_ENV&apos;].tokenize(&apos;,&apos;)</script>
              <sandbox>false</sandbox>
            </secureScript>
            <secureFallbackScript plugin="script-security@1.58">
              <script>return [&apos;local&apos;]</script>
              <sandbox>false</sandbox>
            </secureFallbackScript>
          </script>
          <projectName>deploy_iot_microservices</projectName>
          <choiceType>PT_SINGLE_SELECT</choiceType>
          <filterable>false</filterable>
          <filterLength>1</filterLength>
        </org.biouno.unochoice.ChoiceParameter>
        <org.biouno.unochoice.ChoiceParameter plugin="uno-choice@2.1">
          <name>VERSION</name>
          <description>Choose the version to delete</description>
          <randomName>choice-parameter-1171733868132</randomName>
          <visibleItemCount>5</visibleItemCount>
          <script class="org.biouno.unochoice.model.GroovyScript">
            <secureScript plugin="script-security@1.58">
              <script>import groovy.json.JsonSlurper;
import jenkins.model.*

//def envVars = Jenkins.instance.getGlobalNodeProperties()[0].getEnvVars()
//def gitUrl = envVars[&apos;DEFAULT_GIT_URL&apos;]

def tagsUrl = &quot;https://api.github.com/repos/openecs/iotms/tags&quot;

def slurper = new JsonSlurper()
def jsonData = slurper.parse(new URL(tagsUrl))

return jsonData.name</script>
              <sandbox>false</sandbox>
            </secureScript>
            <secureFallbackScript plugin="script-security@1.58">
              <script>return [&apos;0.4.0&apos;]</script>
              <sandbox>false</sandbox>
            </secureFallbackScript>
          </script>
          <projectName>deploy_iot_microservices</projectName>
          <choiceType>PT_SINGLE_SELECT</choiceType>
          <filterable>false</filterable>
          <filterLength>1</filterLength>
        </org.biouno.unochoice.ChoiceParameter>
        <hudson.model.StringParameterDefinition>
          <name>NODES</name>
          <description>If given, deploy to given nodes (i.e., dev01, dev02)</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.68">
    <script>pipeline {
    agent {
        node {
            label &apos;master&apos;
            customWorkspace &quot;workspace/${env.JOB_NAME}&quot;
        }
    }
    environment {
        TARGET_ENV = &quot;dev&quot;
        ANSIBLE_HOST_KEY_CHECKING = &quot;False&quot;
        ANSIBLE_LIMIT = &quot;&quot;
        SSH_KEY = &quot;vagrant&quot;
    }
    stages {
        stage(&apos;Preparation&apos;) {
            steps {
                echo &apos;Checkout the deployer&apos;
                
                git branch: &apos;master&apos;,
                    credentialsId: &quot;git&quot;,
                    url: &quot;https://github.com/openecs/deployer&quot;                    
            }
        }
        stage(&apos;Deployment&apos;) {
            steps {
                echo &apos;Deployment&apos;
                
                ansiblePlaybook credentialsId: &quot;${env.SSH_KEY}&quot;, 
                	inventory: &quot;${WORKSPACE}/playbooks/inventories/${params.ENV}/hosts&quot;, 
                	playbook: &quot;${WORKSPACE}/playbooks/iotms-deployer.yml&quot;,
                	extras: &quot;-e app_version=${params.VERSION}&quot;
                    	
            }
        }
        stage(&apos;Validation&apos;) {
            steps {
                echo &apos;Run smoke testing&apos;
            }
        }
    }

    post {
        always {
            echo &quot;Send notification&quot;
            wrap([$class: &apos;BuildUser&apos;]) {
                // requires user build vars plugin installed
                /*
                mail to: &quot;${BUILD_USER_EMAIL}&quot;,
                    from: &apos;notification@openecs.com&apos;, 
                    replyTo: &apos;no-reply@openecs.com&apos;, 
                    subject: &quot;Jenkins job ${JOB_BASE_NAME} (${BUILD_NUMBER}) execution status - $currentBuild.currentResult&quot;,
                    body: &quot;Please go to ${BUILD_URL} and verify the build.\n\nNODE: ${NODE_NAME}\nDURATION: ${currentBuild.duration}ms&quot;
                */
            }
                    
        }
        changed {
            echo &quot;changed&quot;
        }
        fixed {
            echo &quot;fixed&quot;
        }
        regression {
            echo &quot;regression&quot;
        }
        aborted {
            echo &quot;aborted&quot;
        }        
        success {
            echo &quot;success&quot;
        }
        failure {
            echo &quot;failure&quot;
        }
        unstable {
            echo &quot;unstable&quot;
        }
        unsuccessful {
            echo &quot;unsuccessful&quot;
        }
        cleanup {
            echo &quot;cleanup&quot;
        }        
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>